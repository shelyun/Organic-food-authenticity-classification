#according to the shap importance analysis, we find important m/z window that impacts the organic/not-organic classification more.
#in each window, there are several m/z, count the m/z those have more peaks in the 1600 samples.
organic_list=[
    [1228.6],
    [726.815, 726.874, 727.021, 727.122, 727.275, 727.46, 727.82, 728.132],
    [1108.55],
    [216.923, 216.949, 216.9508, 216.9667, 216.9793, 216.985, 216.9923, 217.002, 217.011, 217.013, 217.0144, 217.021, 217.023, 217.0239, 217.027, 217.0318, 217.0321, 217.0337, 217.036, 217.039, 217.046, 217.047, 217.049, 217.0503, 217.056, 217.066, 217.068, 217.071, 217.0748, 217.081, 217.084, 217.0862, 217.089, 217.092, 217.093, 217.0949, 217.098, 217.104, 217.105, 217.107, 217.1081, 217.1112, 217.1161, 217.1198, 217.1204, 217.122, 217.127, 217.13, 217.131, 217.144, 217.155, 217.156, 217.159, 217.1618, 217.18, 217.195, 217.9974, 218.024, 218.028, 218.034, 218.035, 218.0438, 218.0669, 218.071, 218.072, 218.0758, 218.079, 218.081, 218.082, 218.084, 218.087, 218.0884, 218.0988, 218.103, 218.104, 218.106, 218.108, 218.111, 218.1152, 218.118, 218.1291, 218.139, 218.147, 218.15, 218.152, 218.154, 218.155, 218.1597, 218.162, 218.1752, 218.19],
    [433.943, 434.012, 434.03, 434.039, 434.045, 434.055, 434.097, 434.113, 434.198, 434.256, 434.758, 434.953, 435.003, 435.012, 435.022, 435.034, 435.058, 435.076, 435.081, 435.097, 435.109, 435.116, 435.127, 435.157, 435.163, 435.174, 435.184, 435.199],
    [658.418, 658.792, 658.998, 659.01, 659.111, 659.201, 659.254, 659.29, 659.289, 659.302, 659.333, 659.794, 659.835],
    [660.0, 660.013, 660.17, 660.291, 660.336, 660.444, 660.944, 660.961, 660.994, 661.008, 661.022, 661.247, 661.294, 661.448],
    [255.944, 255.974, 255.98, 256.016, 256.031, 256.0426, 256.0434, 256.049, 256.058, 256.067, 256.079, 256.082, 256.085, 256.095, 256.097, 256.103, 256.118, 256.129, 256.139, 256.154, 256.16, 256.162, 256.17, 256.191, 256.206, 256.227, 256.235, 256.264, 256.3, 256.577, 256.586],
    [461.742, 461.922, 461.962, 461.969, 461.977, 462.044, 462.057, 462.077, 462.128, 462.172, 462.182, 462.193, 462.244, 462.266, 462.272, 462.283, 462.291, 462.298, 462.75, 462.882, 462.907, 462.929, 462.965, 462.972, 462.99, 463.046, 463.055, 463.063, 463.07, 463.08],
    [260.053, 260.074, 260.075, 260.081, 260.089, 260.098, 260.113, 260.117, 260.126, 260.128, 260.134, 260.149, 260.153, 260.161, 260.165, 260.168, 260.17, 260.173, 260.194, 260.197, 260.201, 260.209, 260.222, 260.237, 260.913, 260.966, 260.992, 261.001, 261.009, 261.011, 261.013, 261.028, 261.035, 261.037, 261.046, 261.053, 261.055, 261.058, 261.062, 261.065, 261.074, 261.085, 261.095, 261.101, 261.11, 261.121, 261.125, 261.131, 261.133, 261.146, 261.147, 261.156, 261.171, 261.183, 261.185, 261.194, 261.204, 261.221],
    [815.106, 815.221, 815.42, 815.462, 815.512, 816.423, 816.46]
]

notorganic_list=[
    [306.585, 306.852, 306.872, 306.894, 306.902, 306.973, 306.977, 306.999, 307.001, 307.011, 307.024, 307.034, 307.043, 307.05, 307.053, 307.062, 307.07, 307.079, 307.083, 307.086, 307.089, 307.094, 307.1, 307.105, 307.107, 307.115, 307.121, 307.131, 307.132, 307.137, 307.152, 307.163, 307.167, 307.177, 307.178, 307.18, 307.188, 307.191, 307.199, 307.204, 307.21, 307.224, 307.248, 307.25, 307.261, 307.544, 307.585, 307.906, 307.954, 308.022, 308.029, 308.036, 308.046, 308.053, 308.074, 308.083, 308.086, 308.091, 308.097],
    [442.951, 442.961, 442.982, 443.006, 443.01, 443.043, 443.05, 443.072, 443.083, 443.096, 443.116, 443.131, 443.133, 443.137, 443.161, 443.168, 443.189, 443.196, 443.208, 443.21, 443.22, 443.226, 443.241, 443.262, 443.276, 443.284, 443.291, 443.298, 443.304, 443.313, 443.334, 443.352, 443.388, 443.901, 443.99, 443.996, 444.027, 444.078, 444.128, 444.135, 444.163, 444.225, 444.259, 444.294, 444.338],
    [452.275, 452.297, 452.454, 452.844, 452.921, 452.94, 452.947, 452.972, 452.99, 453.005, 453.012, 453.023, 453.03, 453.062, 453.088, 453.116, 453.139, 453.154, 453.161, 453.168, 453.176, 453.188, 453.194, 453.21, 453.228, 453.246, 453.275, 453.282, 453.318, 453.371, 453.467, 453.729],
    [632.062, 632.075, 632.188, 632.295, 632.333, 632.674, 632.77, 632.796, 632.838, 632.898, 633.008, 633.045, 633.055, 633.082, 633.123, 633.143, 633.154, 633.251, 633.252, 633.271, 633.291, 633.341, 633.413, 633.455],
    [176.5062, 176.5312, 176.5537, 176.5548, 176.8943, 176.9609, 176.9692, 176.9745, 176.9925, 177.0009, 177.007, 177.0082, 177.0089, 177.0134, 177.0143, 177.0149, 177.0159, 177.0183, 177.0233, 177.0247, 177.0251, 177.0259, 177.0269, 177.0338, 177.0395, 177.0402, 177.042, 177.0435, 177.0443, 177.045, 177.0498, 177.0511, 177.0524, 177.0534, 177.0547, 177.0555, 177.057, 177.0597, 177.061, 177.0617, 177.0758, 177.0766, 177.0799, 177.0872, 177.089, 177.0895, 177.091, 177.0917, 177.0973, 177.1002, 177.1012, 177.1023, 177.1031, 177.1042, 177.1055, 177.1129, 177.1234, 177.1241, 177.1258, 177.1275, 177.1282, 177.1638, 177.1646, 177.1675, 177.1683, 177.5342, 177.535, 177.6691, 177.6699],
    [844.428, 845.015, 845.302, 845.414, 845.434, 845.523],
    [700.272, 700.314, 700.38, 700.412, 700.775, 700.825, 700.885, 700.923, 700.966, 701.032, 701.129, 701.147, 701.28, 701.299, 701.316, 701.335, 701.355, 701.372, 701.393],
    [453.905, 453.947, 453.956, 454.046, 454.104, 454.132, 454.155, 454.17, 454.171, 454.192, 454.213, 454.258, 454.269, 454.278, 454.293, 454.317, 455.008, 455.011, 455.018, 455.026, 455.038, 455.056, 455.075, 455.099, 455.116, 455.124, 455.132, 455.153, 455.166, 455.174, 455.189, 455.205, 455.225, 455.241, 455.262, 455.277, 455.296, 455.313, 455.32, 455.334],
]

import pandas as pd
import os 
import numpy as np
'''
root=os.getcwd()
data=pd.read_csv(os.path.join(root,'files\CherryTomato_Markers_Matrix.csv'),header=None, index_col=0, skiprows=[0,1])
data=data.T
data0=data.iloc[800:,:] #not-organic
data1=data.iloc[:800,:] #organic
df=pd.DataFrame(columns=['organic','m/z','num'])
for l in organic_list:
    data_l=data1[l]
    df1=pd.DataFrame({'organic':np.ones(len(l)),'m/z':l,'num':data_l.astype(bool).sum(axis=0)})
    df=pd.concat([df,df1])
for l in notorganic_list:
    data_l=data0[l]
    df1=pd.DataFrame({'organic':np.zeros(len(l)),'m/z':l,'num':data_l.astype(bool).sum(axis=0)})
    df=pd.concat([df,df1])
df.to_csv(os.path.join(root,'files','3_2importance_feature_counting.csv'),index=None)
'''
#also, count the frequency of peaks of organic list in the nonorganic replicates
root=r'D:\00_danish_thesis'#os.getcwd()
data=pd.read_csv(os.path.join(root,'files\CherryTomato_Markers_Matrix.csv'),header=None, index_col=0, skiprows=[0,1])
data=data.T
data0=data.iloc[800:,:] #not-organic
data1=data.iloc[:800,:] #organic
df=pd.DataFrame(columns=['organic','m/z','num'])
for l in organic_list:
    data_l=data0[l]
    df1=pd.DataFrame({'organic':np.ones(len(l)),'m/z':l,'num':data_l.astype(bool).sum(axis=0)})
    df=pd.concat([df,df1])
for l in notorganic_list:
    data_l=data1[l]
    df1=pd.DataFrame({'organic':np.zeros(len(l)),'m/z':l,'num':data_l.astype(bool).sum(axis=0)})
    df=pd.concat([df,df1])
df.to_csv(os.path.join(root,'files','3_2importance_feature_counting_reverse.csv'),index=None)

